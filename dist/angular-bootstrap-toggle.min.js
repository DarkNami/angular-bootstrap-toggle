!function(){"use strict";angular.module("ui.toggle",[]).value("$toggleSuppressError",!1).constant("toggleConfig",{btnCheckboxFalse:!1,btnCheckboxTrue:!0,on:"On",off:"Off",size:"",onClass:"btn-primary",onstyle:"",offClass:"btn-default",offstyle:"",toggleStyle:"",toggleClass:"",style:"",width:"",height:"",disabled:!1}).controller("ToggleController",["$scope","$attrs","$interpolate","$log","$document","toggleConfig","$toggleSuppressError","$parse",function(e,l,t,n,a,o,s,r){function i(e,l,t,n,a){var o;if(angular.isDefined(n)){if(o=e(n),!o.constant)throw angular.ngModelMinErr("constexpr","Expected constant expression for `{0}`, but saw `{1}`.",t,n);return o(l)}return a}var g=this,d=i(r,e,"ngTrueValue",l.ngTrueValue,!0),f=i(r,e,"ngFalseValue",l.ngFalseValue,!1),u=Object.keys(o);angular.forEach(u,function(n,a){if(angular.isDefined(l[n]))switch(typeof o[n]){case"string":g[n]=t(l[n])(e.$parent);break;case"function":break;default:g[n]=e.$parent.$eval(l[n])}else g[n]=o[n]}),g.onstyle&&(g.onClass=g.onstyle),g.offstyle&&(g.offClass=g.offstyle),g.style&&(g.toggleClass=g.style),""===g.on&&(g.on="&nbsp;"),""===g.off&&(g.off="&nbsp;"),this.evaluateSize=function(){if(!g.width||!g.height){var e=g.onElement.cloneNode(!0);e.style.position="absolute",e.style.display="block",e.style.visibility="hidden",e.style.border="0",e.style.margin="0",a[0].body.appendChild(e);var l=g.offElement.cloneNode(!0);l.style.position="absolute",l.style.display="block",l.style.visibility="hidden",l.style.border="0",l.style.margin="0",a[0].body.appendChild(l),g.width||(g.width=Math.max(e.scrollWidth,l.scrollWidth)+2+"px"),g.height||(g.height=Math.max(e.scrollHeight,l.scrollHeight)+2+"px"),a[0].body.removeChild(e),a[0].body.removeChild(l)}},this.init=function(){var t=g.element.find("label"),n=g.element.find("span"),a=g.element.find("div");g.wrapperElement=a[0],g.onElement=t[0],g.offElement=t[1],g.handleElement=n[0];var o=angular.element(g.onElement);o.html(g.on),angular.element(g.offElement).html(g.off),angular.element(g.wrapperElement).addClass(g.size),o.addClass(g.size),angular.element(g.offElement).addClass(g.size),angular.element(g.handleElement).addClass(g.size),angular.element(g.wrapperElement).addClass(g.toggleClass),angular.element(g.onElement).addClass(g.onClass),angular.element(g.offElement).addClass(g.offClass),g.evaluateSize(),angular.element(g.onElement).addClass("toggle-on"),angular.element(g.offElement).addClass("toggle-off"),g.computeStyle(),g.ngModelCtrl.$render=function(){g.toggle()},angular.isDefined(l.ngChange)&&g.ngModelCtrl.$viewChangeListeners.push(function(){e.$eval(l.ngChange)})},this.computeStyle=function(){angular.element(g.onElement).attr("disabled",g.disabled),angular.element(g.offElement).attr("disabled",g.disabled),angular.element(g.handleElement).attr("disabled",g.disabled),e.wrapperStyle=g.toggleStyle?e.$parent.$eval(g.toggleStyle):{},e.wrapperStyle.width=g.width,e.wrapperStyle.height=g.height},this.toggle=function(){angular.equals(g.ngModelCtrl.$viewValue,d)?angular.element(g.wrapperElement).removeClass("off "+g.offClass).addClass(g.onClass):angular.element(g.wrapperElement).addClass("off "+g.offClass).removeClass(g.onClass)},e.onSwitch=function(e){return!g.disabled&&(g.ngModelCtrl.$setViewValue(angular.equals(g.ngModelCtrl.$viewValue,d)?f:d),g.ngModelCtrl.$render(),!0)},angular.forEach(u,function(e,t){l.$observe(e,function(l){g[e]!==l&&(g[e]=l,g.computeStyle())})})}]).directive("toggle",function(){return{restrict:"E",template:'<div ng-cloak class="toggle btn off" ng-style="wrapperStyle"ng-click="onSwitch($event)"><div class="toggle-group"><label class="btn toggle-on-pad"></label><label class="btn toggle-off-pad active"></label><span class="btn btn-default toggle-handle"></span></div></div>',scope:{ngModel:"="},require:["toggle","ngModel"],controller:"ToggleController",controllerAs:"toggle",compile:function(e,l,t){return{post:function(e,l,t,n){var a=n[0];a.element=l,a.ngModelCtrl=n[1],a.init()},pre:function(){}}}}})}();